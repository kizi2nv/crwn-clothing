{"ast":null,"code":"import { takeLatest, put, call, all } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n;\nexport function* onEmailSignInSTart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSIgnOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\n;\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInSTart), call(isUserAuthenticated), call(onSIgnOutStart), call(onSignUpStart), call(onSignUpSuccess)]);\n}","map":{"version":3,"sources":["C:/Users/PROBOOK/Desktop/react_projects/crwn-clothing/client/src/redux/user/user.sagas.js"],"names":["takeLatest","put","call","all","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","signOut","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInSTart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSIgnOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest, put, call, all} from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\n\r\nimport {\r\n    signInSuccess,\r\n    signInFailure,\r\n    signOutSuccess,\r\n    signOutFailure,\r\n    signUpSuccess,\r\n    signUpFailure\r\n    \r\n} from './user.actions';\r\n\r\nimport {\r\n     auth,\r\n     googleProvider, \r\n     createUserProfileDocument,\r\n     getCurrentUser\r\n    } from '../../firebase/firebase.utils';\r\n\r\nexport function* getSnapshotFromUserAuth (userAuth, additionalData) {\r\n    try{\r\n    const userRef = yield call (createUserProfileDocument, userAuth, additionalData);\r\n    const userSnapshot = yield userRef.get()\r\n    yield put(signInSuccess({id: userSnapshot.id, ...userSnapshot.data() }));\r\n} catch (error) {\r\n    yield put(signInFailure(error));\r\n}\r\n}  \r\n\r\nexport function* signInWithGoogle() {\r\n\r\n    try {\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n}catch(error){\r\n    yield put(signInFailure(error));\r\n}\r\n};\r\n\r\nexport function* signInWithEmail({payload:{email, password}}){\r\n    try {\r\n        const {user} = yield auth.signInWithEmailAndPassword(email, password); \r\n        yield getSnapshotFromUserAuth(user);\r\n    \r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* signOut() {\r\n    try {\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess());\r\n    } catch (error) {\r\n        yield put(signOutFailure(error));\r\n    }\r\n}\r\n\r\nexport function* signUp({payload: {email, password,displayName}}) {\r\n    try {\r\n        const {user} = yield auth.createUserWithEmailAndPassword(\r\n            email,\r\n            password\r\n        );\r\n        yield put(signUpSuccess({user, additionalData:{displayName}}));\r\n    } catch (error) {\r\n       yield put(signUpFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInAfterSignUp({payload: {user, additionalData}}) {\r\nyield getSnapshotFromUserAuth(user, additionalData)\r\n}\r\n\r\nexport function* isUserAuthenticated(){\r\ntry {\r\n    const userAuth = yield getCurrentUser();\r\n    if(!userAuth) return;\r\n    yield getSnapshotFromUserAuth(userAuth);\r\n} catch (error) {\r\n    yield put(signInFailure(error));\r\n}\r\n\r\n};\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,\r\n        signInWithGoogle\r\n        )\r\n};\r\n\r\nexport function* onEmailSignInSTart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, \r\n        signInWithEmail\r\n        )\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,\r\n                    isUserAuthenticated   \r\n        )\r\n}\r\n\r\nexport function* onSIgnOutStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, \r\n            signOut\r\n        );\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\r\n};\r\n\r\nexport function* onSignUpSuccess() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp)\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInSTart),\r\n        call(isUserAuthenticated),\r\n        call(onSIgnOutStart),\r\n        call(onSignUpStart),\r\n        call(onSignUpSuccess)\r\n    \r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}