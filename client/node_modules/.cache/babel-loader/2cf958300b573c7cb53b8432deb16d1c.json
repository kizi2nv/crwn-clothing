{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAH4wjlKZsMYhCXAl__BOwzMrVT47DoA6k\",\n  authDomain: \"mycrwn.firebaseapp.com\",\n  databaseURL: \"https://mycrwn.firebaseio.com\",\n  projectId: \"mycrwn\",\n  storageBucket: \"mycrwn.appspot.com\",\n  messagingSenderId: \"36369318121\",\n  appId: \"1:36369318121:web:285d2da3256b5f6cc8b078\",\n  measurementId: \"G-DC017JZZR7\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalDAta) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalDAta\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collectionsSnapshot => {\n  const transformedCollection = collectionsSnapshot.docs.map(docSnapshot => {\n    const {\n      title,\n      items\n    } = docSnapshot.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: docSnapshot.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubsrcribe = auth.onAuthStateChanged(userAuth => {\n      unsubsrcribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/PROBOOK/Desktop/react_projects/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalDAta","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collectionsSnapshot","transformedCollection","docs","map","docSnapshot","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubsrcribe","auth","onAuthStateChanged","initializeApp","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\n\r\nimport 'firebase/firestore';\r\n\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAH4wjlKZsMYhCXAl__BOwzMrVT47DoA6k\",\r\n    authDomain: \"mycrwn.firebaseapp.com\",\r\n    databaseURL: \"https://mycrwn.firebaseio.com\",\r\n    projectId: \"mycrwn\",\r\n    storageBucket: \"mycrwn.appspot.com\",\r\n    messagingSenderId: \"36369318121\",\r\n    appId: \"1:36369318121:web:285d2da3256b5f6cc8b078\",\r\n    measurementId: \"G-DC017JZZR7\"\r\n  };\r\n\r\n  export const createUserProfileDocument = async (userAuth, additionalDAta) =>{\r\n    if (!userAuth) return;\r\n    \r\n    const userRef = firestore.doc(`users/${userAuth.uid}`); \r\n   \r\n    const snapShot = await userRef.get();  \r\n    \r\n    if (!snapShot.exists){\r\n      const{displayName, email} = userAuth;\r\n      const createdAt = new Date();\r\n    try{ \r\n    await userRef.set({\r\n     displayName,\r\n     email,\r\n     createdAt,\r\n     ...additionalDAta\r\n})\r\n\r\n} catch(error) {\r\n  console.log('error creating user', error.message);\r\n  \r\n}\r\n\r\n\r\n   }\r\n    \r\n    return userRef;\r\n    \r\n  } ;\r\n\r\n  export const addCollectionAndDocuments = async (collectionKey, objectsToAdd) =>{\r\n    const collectionRef = firestore.collection(collectionKey);\r\n   \r\n\r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach(obj =>{\r\n      const newDocRef = collectionRef.doc();\r\n      batch.set(newDocRef, obj);\r\n    });\r\n\r\n   return await batch.commit()\r\n  };\r\n\r\nexport const convertCollectionsSnapshotToMap = collectionsSnapshot => {\r\n  const transformedCollection = collectionsSnapshot.docs.map(docSnapshot => {\r\n    const { title, items} = docSnapshot.data();\r\n\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: docSnapshot.id,\r\n      title,\r\n      items\r\n    };\r\n  });\r\n\r\n\r\nreturn transformedCollection.reduce((accumulator, collection) => {\r\naccumulator[collection.title.toLowerCase()] = collection;\r\nreturn accumulator;\r\n} , {});\r\n\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n  return new Promise ((resolve, reject) => {\r\n    const unsubsrcribe = auth.onAuthStateChanged(userAuth => {\r\n      unsubsrcribe();\r\n      resolve(userAuth);\r\n    }, reject)\r\n    \r\n  })\r\n}\r\n\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  export const auth = firebase.auth();\r\n\r\n  export const firestore = firebase.firestore();\r\n\r\n  export const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n  googleProvider.setCustomParameters({ prompt: 'select_account'});\r\n  export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\n  export default firebase;\r\n  "]},"metadata":{},"sourceType":"module"}