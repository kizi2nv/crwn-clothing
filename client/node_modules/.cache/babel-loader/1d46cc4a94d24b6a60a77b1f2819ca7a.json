{"ast":null,"code":"import { takeLatest, put, call, all } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\n;\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n;\nexport function* onEmailSignInSTart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSIgnOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInSTart), // call(isUserAuthenticated),\n  call(onSIgnOutStart)]);\n}","map":{"version":3,"sources":["C:/Users/PROBOOK/Desktop/react_projects/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","call","all","UserActionTypes","signInSuccess","signInFailure","signOutSuccess","signOutFailure","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","signOut","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInSTart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSIgnOutStart","SIGN_OUT_START","userSagas"],"mappings":"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","sourcesContent":["import {takeLatest, put, call, all} from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\n\r\nimport {\r\n    signInSuccess,\r\n    signInFailure,\r\n    signOutSuccess,\r\n    signOutFailure,\r\n    \r\n} from './user.actions';\r\n\r\nimport {\r\n     auth,\r\n     googleProvider, \r\n     createUserProfileDocument,\r\n     getCurrentUser\r\n    } from '../../firebase/firebase.utils';\r\n\r\nexport function* getSnapshotFromUserAuth (userAuth) {\r\n    try{\r\n    const userRef = yield call (createUserProfileDocument, userAuth);\r\n    const userSnapshot = yield userRef.get()\r\n    yield put(signInSuccess({id: userSnapshot.id, ...userSnapshot.data() }));\r\n} catch (error) {\r\n    yield put(signInFailure(error));\r\n}\r\n}  \r\n\r\nexport function* signInWithGoogle() {\r\n\r\n    try {\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n}catch(error){\r\n    yield put(signInFailure(error));\r\n}\r\n};\r\n\r\nexport function* signInWithEmail({payload:{email, password}}){\r\n    try {\r\n        const {user} = yield auth.signInWithEmailAndPassword(email, password); \r\n        yield getSnapshotFromUserAuth(user);\r\n    \r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n};\r\n\r\nexport function* signOut() {\r\n    try {\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess());\r\n    } catch (error) {\r\n        yield put(signOutFailure(error));\r\n    }\r\n}\r\n\r\nexport function* isUserAuthenticated(){\r\ntry {\r\n    const userAuth = yield getCurrentUser();\r\n    if(!userAuth) return;\r\n    yield getSnapshotFromUserAuth(userAuth);\r\n} catch (error) {\r\n    yield put(signInFailure(error));\r\n}\r\n\r\n};\r\n\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START,\r\n        signInWithGoogle\r\n        )\r\n};\r\n\r\nexport function* onEmailSignInSTart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, \r\n        signInWithEmail\r\n        )\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION,\r\n                    isUserAuthenticated   \r\n        )\r\n}\r\n\r\nexport function* onSIgnOutStart() {\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, \r\n            signOut\r\n        );\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInSTart),\r\n       // call(isUserAuthenticated),\r\n        call(onSIgnOutStart)\r\n    \r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}